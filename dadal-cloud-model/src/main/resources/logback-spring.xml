<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="true" scanPeriod="60 seconds" debug="false" >
    <!-- OFF(最高),FATAL,(ERROR,WARN,INFO,DEBUG),TRACE,ALL(最低) 设置级别后, 只会打印当前级 以及 更高级别的日志. -->
	<contextName>logback</contextName>
	<!-- name的值是变量的名称,value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后,可以使“${}”来使用变量。 -->
	<property name="logback.logdir" value="${user.dir}/logs" />
	<property name="logback.item.name" value="dadal" />
	<!-- 保存时间 -->
    <property name="maxHistory" value="30"/>
	<!-- 单个日志文件大小上限 -->
    <property name="FILESIZE" value="10MB"/>
    <property name="SIZECAP" value="10GB"/>
	<!-- 日志级别debug -->
    <property name="DEBUGLV" value="debug"/>
	<!-- 日志级别info -->
    <property name="INFOLV" value="info"/>
	<!-- 日志级别error -->
    <property name="ERRORLV" value="error"/>

	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

	<!-- 此日志文档只记录debug级别的 -->
	<appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>${DEBUGLV}</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        
		<!-- RollingFileAppender:滚动记录文件,先将日志记录到指定文件,当符合某个条件时,将日志记录到其他文件 -->
	    <!-- 先按日期存日志,如果日期有变化,将前一天的日志文件名重命名为xxx%日期%索引,新的日志仍然是xxx.log -->
	    <!-- 如果日期没变化,但是当前日志文件的大小超过xxxkb时,对当前日志进行分割 重名名 -->
		<File>${logback.logdir}/${DEBUGLV}.${logback.item.name}.log</File>
		<!--滚动策略,按照时间和大小滚动 SizeAndTimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 根据时间(每日)滚动归档日志文件  -->
			<FileNamePattern>${logback.logdir}/%d{yyyy-MM,aux}/${DEBUGLV}.${logback.item.name}-%d{yyyy-MM-dd}-%i.log</FileNamePattern>
			<!-- 日志周期x天  -->
			<maxHistory>${maxHistory}</maxHistory>
			<!-- 单个日志文件大小上限 -->
			<maxFileSize>${FILESIZE}</maxFileSize>
			<!-- 用来指定日志文件占用空间上限大小,达到此值将会删除旧的日志 -->
			<totalSizeCap>${SIZECAP}</totalSizeCap>
		</rollingPolicy>
		
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %-5level | %thread | %logger{80}-line:%line | %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 此日志文档只记录info级别的 -->
	<appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>${INFOLV}</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
		<File>${logback.logdir}/${INFOLV}.${logback.item.name}.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<FileNamePattern>${logback.logdir}/%d{yyyy-MM,aux}/${INFOLV}.${logback.item.name}-%d{yyyy-MM-dd}-%i.log</FileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
			<maxFileSize>${FILESIZE}</maxFileSize>
			<totalSizeCap>${SIZECAP}</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %-5level | %thread | %logger{80}-line:%line | %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 此日志文档只记录error级别的 -->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>${ERRORLV}</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
		
		<File>${logback.logdir}/${ERRORLV}.${logback.item.name}.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<FileNamePattern>${logback.logdir}/%d{yyyy-MM,aux}/${ERRORLV}.${logback.item.name}-%d{yyyy-MM-dd}-%i.log</FileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
			<maxFileSize>${FILESIZE}</maxFileSize>
			<totalSizeCap>${SIZECAP}</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %-5level | %thread | %logger{80}-line:%line | %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 必选节点,用来指定最基础的日志输出级别,格式化日志输出 -->
	<!-- SpringProfile分配配置了开发(dev)测试(test)以及生产(prod)环境 -->	
	<!-- <springProfile name="prod"> -->
		<!--指定基础日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="DEBUG_FILE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="ERROR_FILE" />
        </root>
    <!-- </springProfile> -->
    
    <!-- 可选节点,用来具体指明包的日志输出级别,它将会覆盖root的输出级别 -->  
    <!-- com.xxx为根包,将记录该包下面的 DEBUG 以及 DEBUG 以下级别的所有日志操作 -->  
    <logger name="com.modules" level="DEBUG">      
        <!-- <appender-ref ref="syslogs" /> -->      
    </logger>
	
</configuration>
